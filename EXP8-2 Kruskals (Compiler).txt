#include <stdio.h>
#include <stdlib.h>

#define MAX_EDGES 100 // Define the maximum number of edges

// Define structure for an edge
struct Edge {
    int src, dest, weight;
};

// Define structure for a graph
struct Graph {
    int V; // Number of vertices
    int E; // Number of edges
    struct Edge* edge[MAX_EDGES]; // Array of edges
};

// Create a graph with V vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->E = 0; // Initially, the graph has no edges
    return graph;
}

// Add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest, int weight) {
    if (graph->E >= MAX_EDGES) {
        printf("Graph is full. Cannot add more edges.\n");
        return;
    }

    struct Edge* newEdge = (struct Edge*)malloc(sizeof(struct Edge));
    newEdge->src = src;
    newEdge->dest = dest;
    newEdge->weight = weight;

    graph->edge[graph->E++] = newEdge;
}

// Function to find the set of an element 'i'
int find(int parent[], int i) {
    if (parent[i] == -1)
        return i;
    return find(parent, parent[i]);
}

// Function to do union of two sets of x and y
void Union(int parent[], int x, int y) {
    parent[x] = y;
}

// Comparator function for sorting edges based on weight
int compare(const void* a, const void* b) {
    struct Edge* a1 = *(struct Edge**)a;
    struct Edge* b1 = *(struct Edge**)b;
    return a1->weight > b1->weight;
}

// Function to construct MST using Kruskal's algorithm
void KruskalMST(struct Graph* graph) {
    int V = graph->V;
    int E = graph->E;
    struct Edge** result = (struct Edge**)malloc((V - 1) * sizeof(struct Edge*)); // Dynamically allocate memory for the resultant MST
    int e = 0; // An index variable, used for result[]
    int i = 0; // An index variable, used for sorted edges

    // Sort all the edges in non-decreasing order of their weight
    qsort(graph->edge, E, sizeof(struct Edge*), compare);

    // Allocate memory for creating V subsets
    int* parent = (int*)malloc(V * sizeof(int));

    // Initialize all subsets as single element sets
    for (int v = 0; v < V; ++v)
        parent[v] = -1;

    // Number of edges to be taken is equal to V-1
    while (e < V - 1 && i < E) {
        // Pick the smallest edge. And increment the index for the next iteration
        struct Edge* next_edge = graph->edge[i++];

        int x = find(parent, next_edge->src);
        int y = find(parent, next_edge->dest);

        // If including this edge doesn't cause a cycle, include it in result and increment the index of result for the next edge
        if (x != y) {
            result[e++] = next_edge;
            Union(parent, x, y);
        }
    }

    // Print the header
    printf("Edge : Weight\n");

    // Print the edges of MST
    for (i = 0; i < e; ++i)
        printf("%d - %d : %d\n", result[i]->src, result[i]->dest, result[i]->weight);

    free(result); // Free dynamically allocated memory for result
}

int main() {
    int V = 4; // Number of vertices in graph
    struct Graph* graph = createGraph(V);

    // Add edges to the graph
    addEdge(graph, 0, 1, 10);
    addEdge(graph, 0, 2, 6);
    addEdge(graph, 0, 3, 5);
    addEdge(graph, 1, 3, 15);
    addEdge(graph, 2, 3, 4);

    // Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm
    KruskalMST(graph);

    return 0;
}
